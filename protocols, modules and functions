--> Функции из модуля functools.
        - lru_cache – декоратор, который кеширует значения функций, которые не меняют свой результат при неизменных 
        аргументах; полезен для кеширования данных, мемоизации (сохранения результатов для возврата без 
        вычисления функции) значений рекурсивных функций (например, такого типа, как функция вычисления n-го числа Фибоначчи) и т.д.;
        - LRU (least recently used) — это алгоритм, при котором вытесняются значения, которые дольше всего не запрашивались. 
        Соответственно, необходимо хранить время последнего запроса к значению. И как только число закэшированных значений 
        превосходит N необходимо вытеснить из кеша значение, которое дольше всего не запрашивалось.
        - partial – частичное применение функции (вызов функции с меньшим количеством аргументов, чем она 
        ожидает, и получение функции, которая принимает оставшиеся параметры).

--> Инструменты для проверки кодстайл (линтеры).
        - Pycodestyle — простая консольная утилита для анализа кода Python, а именно для проверки кода на соответствие PEP8.
        - Pylint совместил в себе как поиск логических так и стилистических ошибок. Этот мощный, гибко настраиваемый 
        инструмент для анализа кода Python отличается большим количеством проверок и разнообразием отчетов.
        - Flake8 — обвязка к входящим в нее утилитам — pyflakes, pycodestyle, mccabe. 
        Flake8 имеет схожий с pylint основной функционал.
        - Prospector — это инструмент для анализа кода Python. Объединяет функциональность других инструментов 
        анализа Python, таких как pylint, pep8, mccabe, Pyflakes, Dodgy, pydocstyle (экспериментально, возможны ошибки). 
        Дополнительно можно подключить mypy, pyroma, vulture. Главной особенностью prospector является наличие 
        предустановленных профилей, которые содержат настройки входящих в него утилит, призванных подавить 
        наиболее придирчивые предупреждения и оставить только важные сообщения.

--> Асинхронное программирование в Python AsyncIO.
        - AsyncIO предоставляет эффективные средства для обработки асинхронных задач.
        1) Цикл Событий (Event Loop): Цикл событий (event loop) является основой асинхронного программирования 
        в AsyncIO. Он управляет выполнением асинхронных задач и событий в программе.
        2) Асинхронные Функции (Coroutines): Асинхронные функции объявляются с использованием ключевого слова 
        async. Они могут содержать оператор await, который используется для ожидания завершения асинхронных операций.
        3) await: Оператор await используется внутри асинхронных функций для ожидания завершения других 
        асинхронных задач.
        4) Таймеры: AsyncIO предоставляет функции для работы с таймерами, что позволяет организовывать 
        отложенное выполнение задач.
        5) Обработка Событий: AsyncIO позволяет создавать события, добавлять обработчики событий и 
        работать с механизмами обработки событий.
        6) Асинхронный Ввод-Вывод (Asynchronous I/O): AsyncIO обеспечивает асинхронные версии многих 
        операций ввода-вывода, что позволяет эффективно работать с сетевыми запросами, базами данных и 
        другими асинхронными ресурсами.

--> Какая разница между аутентификацией и авторизацией?
        - Идентификация (от латинского identifico — отождествлять): присвоение субъектам и объектам 
        идентификатора и / или сравнение идентификатора с перечнем присвоенных идентификаторов. 
        Например, представление человека по имени отчеству - это идентификация.
        - Аутентификация (от греческого: αυθεντικός ; реальный или подлинный): проверка соответствия 
        субъекта и того, за кого он пытается себя выдать, с помощью некой уникальной информации 
        (отпечатки пальцев, цвет радужки, голос и тд.), в простейшем случае - с помощью имени входа и пароля.
        - Авторизация - это проверка и определение полномочий на выполнение некоторых действий 
        (например, чтение файла /var/mail/eltsin) в соответствии с ранее выполненной аутентификацией.

--> Что такое MQ?
        Очереди сообщений, по существу, являются связующим звеном между различными процессами в 
        ваших приложениях и обеспечивают надежный и масштабируемый интерфейс взаимодействия с 
        другими подключенными системами и устройствами. О́чередь — структура данных с дисциплиной 
        доступа к элементам «первый пришёл — первый вышел».

--> Что такое REST?
        REST (Representational state transfer «передача состояния представления») – соглашение о том, как выстраивать 
        сервисы. Под REST часто имеют в виду т.н HTTP REST API. Как правило, это веб-приложение с набором урлов – 
        конечных точек. Урлы принимают и возвращают данные в формате JSON. Тип операции задают методом HTTP-запроса, например:
        - GET          – получить объект или список объектов
        - POST         – создать объект
        - PUT          – обновить существующий объект
        - PATCH        – частично обновить существующий объект
        - DELETE       – удалить объект
        - HEAD         – получить метаданные объекта

--> Что такое SOAP?
        - SOAP (от англ. Simple Object Access Protocol - простой протокол доступа к объектам) - протокол обмена структурированными 
        сообщениями в распределённой вычислительной среде. Сейчас протокол используется для обмена 
        произвольными сообщениями в формате XML, а не только для вызова процедур.

--> Что такое RPC?
        - RPC (Remote Procedure Call) — это протокол для удаленного вызова процедур. Он позволяет вызывать функции 
        (или процедуры) на удаленном компьютере так, как если бы они были локальными. Основная идея RPC заключается 
        в том, чтобы сделать вызов удаленной функции похожим на вызов локальной функции, 
        скрывая детали взаимодействия между удаленными компонентами.

--> Как устроен протокол HTTP?
HTTP — широко распространённый протокол передачи данных, изначально предназначенный для передачи 
гипертекстовых документов (то есть документов, которые могут содержать ссылки, позволяющие 
организовать переход к другим документам).
HTTP – текстовый протокол, работающий поверх TCP/IP. HTTP состоит из запроса и ответа. 
Их структуры похожи: стартовая строка, заголовки, тело ответа. GET /index.html HTTP/1.1  HTTP/1.1 200 OK

--> Статусы запроса.
        - 1xx: используется крайне редко. В этой группе только один статус 100 Continue.
        - 2xx: запрос прошел успешно (данные получены или созданы)
        - 3xx: перенаправление на другой ресурс
        - 4xx: ошибка по вине пользователя (нет такой страницы, нет прав на доступ)
        - 5xx: ошибка по вине сервера (ошибка в коде, сети, конфигурации)

--> Что такое HTTPS?
        HTTPS — расширение протокола HTTP, поддерживающее шифрование по протоколам SSL и TLS.
