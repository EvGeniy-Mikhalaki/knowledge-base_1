

--> Принципы ООП. 
	1) Инкапсуляция - Позволяет скрыть внутренние детали реализации и предоставить интерфейс для взаимодействия с внешним миром.
	2) Наследование - Позволяет создавать новый класс на основе существующего (родительского) класса, наследуя его свойства и методы.
	3) Полиморфизм 	- Позволяет объектам разных типов обрабатываться с использованием общего интерфейса.
	4) Абстракция 	- Отделение сущности от ее конкретных деталей и представление ее как абстракции.
	5) Состояние 	- Управление состоянием объекта и его поведением осуществляется с использованием методов и свойств.
	6) Интерфейс 	- Определение совокупности методов и свойств, которые объект должен предоставлять
	7) Композиция 	- Позволяет создавать объекты с новым поведением, комбинируя уже существующие объекты.


--> Чем django отлличается от FastAPI?


------------------- 11. NoSQL и Другие Базы Данных --------------------------


--> В чем различия между SQL и NoSQL базами данных?
    - SQL (Structured Query Language) и NoSQL (Not Only SQL) представляют собой два различных 
    подхода к хранению и обработке данных в базах данных. Вот основные различия между ними:
    1) Тип данных и модель данных:
    - SQL: Использует реляционную модель данных, где данные организованы в таблицы 
    с жесткими схемами (структурами).
    - NoSQL: Имеет гибкую модель данных, которая может включать документы, ключ-значение, 
    столбцовые семейства или графовые структуры. NoSQL базы данных не требуют строгой схемы.
    2) Язык запросов:
    - SQL: Использует SQL для выполнения запросов и манипуляции данными.
    - NoSQL: Язык запросов зависит от конкретного вида NoSQL базы данных. 
    Например, MongoDB использует BSON-запросы (Binary JSON), Cassandra использует 
    CQL (Cassandra Query Language), а Redis использует команды на основе ключ-значение.
    3) Схема данных:
    - SQL: Требует строгой схемы данных. Изменение схемы может потребовать пересоздания 
    таблиц и может быть более сложным.
    - NoSQL: Позволяет гибкость в изменении схемы данных. Добавление новых полей 
    может быть легким и динамичным процессом.
    4) Масштабирование:
    - SQL: Традиционно применяется масштабирование вертикально (увеличение производительности 
    за счет добавления ресурсов на одном сервере).
    - NoSQL: Обычно лучше масштабируется горизонтально (добавление новых серверов 
    в распределенной системе).
    5) Транзакции:
    - SQL: Поддерживает ACID-транзакции (Atomicity, Consistency, Isolation, Durability), 
    обеспечивающие целостность данных.
    - NoSQL: Может поддерживать более слабые или гибкие гарантии целостности, 
    что может быть приемлемым в некоторых случаях.
    6) Применение:
    - SQL: Хорошо подходит для приложений с жесткой структурой данных, где требуется 
    поддержка сложных запросов и транзакций.
    - NoSQL: Эффективен для работы с неструктурированными или полуструктурированными данными, 
    а также в случаях, когда важна гибкость схемы данных и горизонтальное масштабирование.


--> Какие NoSQL базы данных вы знаете?
    - NoSQL: MongoDB, Cassandra, Redis, Couchbase.


--> Что такое mocking?
	- Mocking (мокирование) в программировании — это техника, используемая в тестировании, 
	которая заключается в создании имитации (mock) объектов или функций для того, чтобы 
	тестировать части кода независимо от реальных зависимостей. Объекты-заглушки (mock objects) 
	предоставляют упрощенные версии реальных объектов, которые могут имитировать их поведение, 
	но не обязательно выполнять реальные действия.


--> Виды тестирования?
	1) Модульное тестирование (Unit Testing): Проверка отдельных модулей (функций, классов) на 
	корректность их работы. Модульные тесты должны быть легко автоматизируемыми и быстро выполняемыми.
	3) Интеграционное тестирование (Integration Testing): Проверка взаимодействия между различными 
	компонентами или модулями системы. Цель — обнаружение ошибок в интеграции и убедиться, что компоненты 
	работают вместе правильно.
	5) Функциональное тестирование (Functional Testing): Проверка функциональности приложения с точки 
	зрения конечного пользователя. Функциональные тесты проверяют, соответствует ли приложение требованиям.
	6) Приемочное тестирование (Acceptance Testing): Проверка того, что приложение соответствует требованиям 
	заказчика. Обычно выполняется заказчиком или тестировщиками, представляющими интересы заказчика.
	7) Нагрузочное тестирование (Load Testing): Оценка производительности приложения при различных 
	нагрузках. Цель — определить, как приложение справляется с различными уровнями загрузки.
	8) Стресс-тестирование (Stress Testing): Проверка устойчивости приложения при экстремальных 
	условиях и больших объемах данных. Стресс-тестирование может выявить недостатки в обработке ошибок 
	и восстановлении после сбоев.
	9) Системное тестирование (System Testing): Проверка всей системы в целом. Цель — убедиться, 
	что все компоненты взаимодействуют друг с другом правильно и что система в целом соответствует требованиям.
	10) Регрессионное тестирование (Regression Testing): Проверка, не появились ли новые ошибки или 
	дефекты после внесения изменений в код приложения. Регрессионное тестирование гарантирует 
	сохранение стабильности программы.
	11) Автоматизированное тестирование (Automated Testing): Использование инструментов и скриптов для 
	автоматизации выполнения тестов. Это ускоряет процесс тестирования и позволяет выполнять тесты более часто.