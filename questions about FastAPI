-------------------------------------- FastAPI --------------------------------------
--> Что такое FastAPI?
    - FastAPI - это современный веб-фреймворк для создания API на языке программирования 
    Python, который основан на стандарте OpenAPI и поддерживает автоматическую 
    генерацию документации.

--> Какие преимущества предоставляет FastAPI?
    - Автоматическая генерация документации: FastAPI автоматически создает интерактивную 
    документацию API на основе аннотаций и комментариев в коде. Swagger UI и ReDo
    - Асинхронная поддержка: FastAPI полностью поддерживает асинхронное программирование, 
    что позволяет создавать эффективные и масштабируемые приложения, способные обрабатывать 
    тысячи одновременных соединений.
    - Совместимость с OpenAPI и JSON Schema: FastAPI построен поверх стандартов OpenAPI и 
    JSON Schema, что обеспечивает совместимость с другими инструментами и позволяет
    создавать стандартизированные API.
    - Быстродействие: FastAPI достигает высокой производительности за счет использования
    современных технологий, таких как Starlette и Pydantic. Он является одним из самых 
    быстрых фреймворков на языке Python.
    - Интеграция с аутентификацией и авторизацией: FastAPI предоставляет удобные средства 
    для реализации аутентификации и авторизации, включая OAuth2 и JSON Web Tokens (JWT).
    - Легкость использования: Синтаксис FastAPI напоминает синтаксис Flask, что 
    делает его легким для освоения для разработчиков, знакомых с другими фреймворками.

--> Как создать простое API с использованием FastAPI?
    1) Создайте файл main.py и добавьте следующий код:
        from fastapi import FastAPI
        app = FastAPI()
        @app.get("/")
        def read_root():
        return {"Hello": "World"}
        @app.get("/items/{item_id}")
        def read_item(item_id: int, query_param: str = None):
            return {"item_id": item_id, "query_param": query_param}
    2) uvicorn main:app --reload
    3) доступно по адресу http://127.0.0.1:8000.
    - Откройте Swagger документацию для API по адресу http://127.0.0.1:8000/docs
    или ReDoc по адресу http://127.0.0.1:8000/redoc для визуализации и 
    интерактивного тестирования API.

--> Как работает автоматическая валидация запросов в FastAPI?
    - В FastAPI автоматическая валидация запросов осуществляется с использованием 
    Pydantic, библиотеки для валидации данных и создания схем данных.
    1) Аннотации типов данных: В FastAPI вы объявляете типы данных параметров 
    и тела запроса, а FastAPI использует эту информацию для валидации.
        from fastapi import FastAPI
        app = FastAPI()
        @app.get("/items/{item_id}")
        def read_item(item_id: int, query_param: str = None):
            return {"item_id": item_id, "query_param": query_param}
    2) Генерация схемы Pydantic: FastAPI автоматически генерирует схему Pydantic 
    для запроса и ответа на основе аннотаций типов данных.
    3) Валидация данных: При получении запроса FastAPI автоматически проверяет, 
    соответствуют ли переданные данные ожидаемым типам и структуре.
    4) Возврат ошибок: Если данные не соответствуют ожиданиям, FastAPI
    автоматически возвращает ошибку с подробной информацией о том, какие
    данные не прошли валидацию и почему.
    5) Swagger и ReDoc документация: Сгенерированные схемы Pydantic также
    используются для автоматического создания интерактивной документации
    в Swagger и ReDoc.

--> Как добавить документацию к API в FastAPI?
    - В FastAPI документация для вашего API создается автоматически на основе 
    аннотаций типов данных и комментариев, которые вы добавляете к функциям 
    обработчикам запросов. Для создания дополнительной документации и описания API,
    вы можете использовать комментарии и дополнительные атрибуты
    Pydantic-моделей и параметров.
    1) Комментарии к функциям:
    Добавьте комментарии к функциям обработчикам запросов. Эти комментарии будут 
    использоваться в качестве описания для соответствующих путей в документации.
        from fastapi import FastAPI
        app = FastAPI()
        @app.get("/items/{item_id}")
        def read_item(item_id: int, query_param: str = None):
            """
            Это описание будет отображаться в документации.
            """
            return {"item_id": item_id, "query_param": query_param}
    2) Атрибуты Pydantic-моделей:
    Если вы используете Pydantic-модели, вы можете добавить атрибут
    description для полей модели.
    3) Определение завершенной документации:
    Вы можете использовать doc-строку в верхней части вашего
    приложения для создания полной документации.
        from fastapi import FastAPI
        app = FastAPI(
            title="My API",
            description="This is a very fancy project, with auto docs for the API and everything",
            version="2.5.0",
        )

--> Как обработать параметры запроса в FastAPI?
    1) Query Parameters:
    Вы можете использовать аргументы функции с аннотацией типа для получения значений параметров 
    запроса, передаваемых в строке запроса. Для этого используется класс Query.
        from fastapi import FastAPI, Query
        app = FastAPI()
        @app.get("/items/")
        async def read_item(skip: int = Query(0, description="Number of items to skip", gt=0)):
            return {"skip": skip}
    2) Path Parameters:
    Для параметров пути используется аргумент с аннотацией типа и
    соответствующим значением в пути запроса.
        from fastapi import FastAPI
        app = FastAPI()
        @app.get("/items/{item_id}")
        async def read_item(item_id: int, q: str = None):
            return {"item_id": item_id, "q": q}
    3) Cookie Parameters:
    Используйте аргументы функции с аннотацией типа для получения значений из куки.
        from fastapi import FastAPI, Cookie
        app = FastAPI()
        @app.get("/items/")
        async def read_item(ads_id: int = Cookie(None)):
            return {"ads_id": ads_id}

--> Как обрабатывать асинхронные запросы в FastAPI?
    - FastAPI предоставляет поддержку асинхронного программирования с использованием
    синтаксиса Python async/await и библиотеки Starlette для обработки асинхронных запросов. 
        from fastapi import FastAPI
        import httpx
        app = FastAPI()
        async def fetch_data():
            async with httpx.AsyncClient() as client:
                # Выполняем асинхронный запрос к внешнему API
                response = await client.get("https://jsonplaceholder.typicode.com/todos/1")
                return response.json()
        @app.get("/")
        async def read_data():
            # Вызываем асинхронную функцию для получения данных
            data = await fetch_data()
            return {"data": data}
    - В данном примере fetch_data - это асинхронная функция, выполняющая асинхронный
    HTTP-запрос с использованием библиотеки httpx. Затем в обработчике запроса (read_data)
    вызывается этот метод с использованием await, чтобы дождаться завершения
    асинхронной операции.

--> Какие могут быть аутентификационные схемы в FastAPI?
    1) HTTP Basic (BasicAuth): Простая аутентификация с использованием базовых
    заголовков Authorization.
        from fastapi import Depends, FastAPI, HTTPException, status
        from fastapi.security import HTTPBasic, HTTPBasicCredentials
        app = FastAPI()
        security = HTTPBasic()
        @app.get("/secure-data")
        async def read_secure_data(credentials: HTTPBasicCredentials = Depends(security)):
            if credentials.username == "user" and credentials.password == "password":
                return {"message": "Successfully authenticated"}
            else:
                raise HTTPException(
                    status_code=status.HTTP_401_UNAUTHORIZED,
                    detail="Invalid credentials",
                    headers={"WWW-Authenticate": "Basic"},
                )
    2) OAuth2 с использованием JWT (JSON Web Tokens): 
    Сложная аутентификация на основе токенов JSON Web.
        from fastapi import Depends, FastAPI, HTTPException, status
        from fastapi.security import OAuth2AuthorizationCodeBearer
        app = FastAPI()
        security = OAuth2AuthorizationCodeBearer(tokenUrl="token")
        @app.get("/secure-data")
        async def read_secure_data(token: str = Depends(security)):
            # Валидация и использование токена
            return {"message": "Successfully authenticated"}
    3) API ключи (APIKey): Простой механизм аутентификации 
    с использованием API-ключей.
        from fastapi import Depends, FastAPI, HTTPException, status
        from fastapi.security import APIKeyHeader
        app = FastAPI()
        api_key_scheme = APIKeyHeader(name="X-API-Key")
        @app.get("/secure-data")
        async def read_secure_data(api_key: str = Depends(api_key_scheme)):
            # Валидация и использование API-ключа
            return {"message": "Successfully authenticated"}

--> Как обрабатывать ошибки в FastAPI?
    1) HTTPException:
        from fastapi import FastAPI, HTTPException, status
        app = FastAPI()
        @app.get("/items/{item_id}")
        async def read_item(item_id: int, q: str = None):
            if item_id == 42:
                # Генерация HTTPException с кастомным статус-кодом и деталями ошибки
                raise HTTPException(status_code=status.HTTP_418_IM_A_TEAPOT, detail="A teapot?")
            # Ваш бизнес-логика здесь
            return {"item_id": item_id, "q": q}
    2) try/except: 
        from fastapi import FastAPI, HTTPException, status
        app = FastAPI()
        @app.get("/items/{item_id}")
        async def read_item(item_id: int, q: str = None):
            try:
                # Ваша бизнес-логика здесь
                if item_id == 42:
                    raise HTTPException(status_code=status.HTTP_418_IM_A_TEAPOT, detail="A teapot?")
                return {"item_id": item_id, "q": q}
            except Exception as e:
                # Обработка ошибок и возврат пользователю подходящего ответа
                return {"error": str(e)}
    3) app.exception_handler обработка ошибки на уровне всего приложения:
        from fastapi import FastAPI, HTTPException, status
        app = FastAPI()
        # Глобальный обработчик ошибок
        @app.exception_handler(HTTPException)
        async def http_exception_handler(request, exc):
            return JSONResponse(
                status_code=exc.status_code,
                content={"message": exc.detail},
            )

--> Как реализовать зависимости (dependencies) в FastAPI?
    - В FastAPI зависимости представляют собой инструмент для внедрения кода перед
    выполнением обработчика запроса. Они позволяют выполнять предварительные
    действия, такие как аутентификация, валидация данных, работа с базой данных, 
    и многое другое.
        from fastapi import Depends, FastAPI, HTTPException
        app = FastAPI()  
        # Зависимость, которая будет выполнена перед каждым обработчиком запроса
        def common_parameters(q: str = None, skip: int = 0, limit: int = 10):
            return {"q": q, "skip": skip, "limit": limit}
        # Обработчик запроса, использующий зависимость common_parameters
        @app.get("/items/")
        async def read_items(commons: dict = Depends(common_parameters)):
            return commons
    - Пример использования зависимостей для аутентификации:
        from fastapi import Depends, FastAPI, HTTPException, status
        app = FastAPI()
        # Зависимость для проверки токена аутентификации
        def get_current_user(token: str = Depends(get_token)):
            credentials_exception = HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Could not validate credentials",
                headers={"WWW-Authenticate": "Bearer"},
            )
            return verify_token(token, credentials_exception)
        # Обработчик запроса, использующий зависимость для аутентификации
        @app.get("/users/me", response_model=User)
        async def read_users_me(current_user: User = Depends(get_current_user)):
            return current_user

--> Как использовать Query Parameters в FastAPI?
    - В FastAPI вы можете использовать Query Parameters для получения параметров
    из строки запроса (query string). Это часто используется для передачи
    дополнительных параметров в ваш API. Вот пример использования Query Parameters:
        from fastapi import FastAPI
        app = FastAPI()
        @app.get("/items/")
        async def read_item(skip: int = 0, limit: int = 10):
            return {"skip": skip, "limit": limit}
    - В этом примере /items/ - это путь к обработчику запроса, а skip и limit - 
    это Query Parameters. Вы можете отправить запрос к этому эндпоинту, добавив
    параметры в строку запроса, например: /items/?skip=5&limit=20

--> Как обрабатывать заголовки запроса в FastAPI?
    В FastAPI заголовки запроса обрабатываются при помощи параметра
    headers в функции обработчика запроса.
        from fastapi import FastAPI, Header
        app = FastAPI()
        @app.get("/items/")
        async def read_item(user_agent: str = Header(None, convert_underscores=False)):
            return {"User-Agent": user_agent}
    В этом примере user_agent - это параметр заголовка, который будет извлечен из запроса. 
    Параметр Header используется для указания, что значение должно быть взято из заголовка,
    а не из строки запроса. Аргумент None означает, что заголовок не является обязательным. 
    Параметр convert_underscores=False указывает FastAPI не преобразовывать подчеркивания
    в заголовке в дефисы.
    http --headers GET http://127.0.0.1:8000/items/ "User-Agent: MyCustomUserAgent"

--> Как реализовать маршрутизацию (routing) в FastAPI?
    В FastAPI маршрутизация осуществляется с использованием экземпляра класса FastAPI.
    Вы можете определить обработчики маршрутов (route handlers) с помощью декораторов,
    таких как @app.get(), @app.post(), и так далее.
        from fastapi import FastAPI
        app = FastAPI()
        @app.get("/")
        def read_root():
            return {"message": "Hello, World!"}
        @app.get("/items/{item_id}")
        def read_item(item_id: int, query_param: str = None):
            return {"item_id": item_id, "query_param": query_param}

--> Как реализовать множественные пути (multiple paths) для одного обработчика в FastAPI?
    - В FastAPI вы можете использовать несколько декораторов маршрутов (@app.get(), @app.post(),
    и так далее) для одного и того же обработчика. Это позволяет вам создавать
    множественные пути для одного и того же маршрута.
        from fastapi import FastAPI
        app = FastAPI()
        # Обработчик для двух путей
        @app.get("/items/", "/items/{item_id}")
        def read_item(item_id: int = None, query_param: str = None):
            if item_id is not None:
                return {"item_id": item_id, "query_param": query_param}
            return {"message": "Read all items", "query_param": query_param}
    - FastAPI также поддерживает использование оператора | для объединения путей,
    что делает код более явным:
        @app.get("/items/" | "/items/{item_id}")
        def read_item(item_id: int = None, query_param: str = None):
            if item_id is not None:
                return {"item_id": item_id, "query_param": query_param}
            return {"message": "Read all items", "query_param": query_param}

--> Что такое CORS (Cross-Origin Resource Sharing) в FastAPI?
    - CORS (Cross-Origin Resource Sharing) - это стандарт, который определяет,
    как веб-страницы могут запросить ресурсы с другого домена (или порта), чем сайт,
    с которого они были загружены. Это важный механизм безопасности веб-браузеров,
    предотвращающий запросы к ресурсам с других доменов, если сервер не разрешил это явно.
    - FastAPI предоставляет средство в виде CORS Middleware (промежуточного программного
    обеспечения), которое можно включить в приложение. Это Middleware добавляет
    необходимые заголовки к HTTP-ответам, чтобы браузер знал, что запросы с
    различных источников разрешены.

--> Как включить CORS (Cross-Origin Resource Sharing) в FastAPI?
    - Для включения CORS в FastAPI, вы можете использовать пакет fastapi.middleware.cors
        from fastapi import FastAPI
        from fastapi.middleware.cors import CORSMiddleware
        app = FastAPI()
        # Настройки CORS
        origins = [
            "http://localhost",
            "http://localhost:8000",
            "https://your-frontend-app.com",
            "https://another-frontend-app.com",
        ]
        # Включение CORS middleware
        app.add_middleware(
            CORSMiddleware,
            allow_origins=origins,
            allow_credentials=True,
            allow_methods=["*"],  # Разрешить все HTTP-методы
            allow_headers=["*"],  # Разрешить все заголовки
        )
--> Что такое middleware в FastAPI?
    - Middleware в FastAPI - это способ вставить свою логику обработки запросов 
    и ответов в процесс обработки HTTP-запросов. Middleware предоставляет уровень
    абстракции, позволяя вам выполнить дополнительные действия перед обработкой
    запроса обработчиками маршрутов и после этой обработки.

--> Как создать мидлвару (middleware) в FastAPI?
    - В FastAPI, создание middleware осуществляется с использованием Middleware
    класса из библиотеки fastapi.middleware и регистрация этого middleware в
    экземпляре FastAPI приложения.
        from fastapi import FastAPI, Request
        from fastapi.middleware.trustedhost import TrustedHostMiddleware
        app = FastAPI()
        # Пример middleware, которая будет выполняться для каждого запроса
        class CustomMiddleware:
            def __init__(self, app: FastAPI):
                self.app = app
            async def __call__(self, request: Request, call_next):
                # Можно выполнить действия до обработки запроса обработчиками маршрутов
                print("Middleware Pre-processing")
                # Передаем запрос следующему обработчику (возможно, другой middleware или самому обработчику маршрута)
                response = await call_next(request)
                # Можно выполнить действия после обработки запроса
                print("Middleware Post-processing")
                return response
        # Регистрируем middleware в приложении
        app.add_middleware(CustomMiddleware)

--> Что такое OAuth2 в FastAPI?
    - OAuth 2.0 (Open Authorization 2.0) - это протокол авторизации, который
    предоставляет стандартизированный способ предоставления разрешений на доступ
    к ресурсам веб-сервера от имени пользователя. Этот протокол позволяет пользователям
    предоставлять третьим лицам доступ к своим ресурсам без предоставления им
    своих учетных данных. 

--> Как реализовать аутентификацию с использованием OAuth2 в FastAPI?
        # Задаем параметры OAuth2
        oauth2_scheme = OAuth2AuthorizationCodeBearer(
            authorizationUrl="token",
            tokenUrl="token",
        )
        
        # Реализация аутентификации
        def get_current_user(token: str = Depends(oauth2_scheme)):
            # В реальном приложении здесь будет производиться проверка токена и
            # возвращение данных пользователя на основе токена
            return {"token": token}
        
        
        # Защищенный маршрут
        @app.get("/users/me", response_model=dict)
        async def read_users_me(current_user: dict = Depends(get_current_user)):
            return current_user

--> Как работать с БД в FastAPI?
    FastAPI предоставляет встроенную поддержку работы с базами данных.
    Он интегрируется с любой базой данных, которая поддерживается SQLAlchemy.
        pip install fastapi uvicorn sqlalchemy

--> Как обрабатывать файловые загрузки в FastAPI?
    FastAPI обеспечивает простой способ обработки файловых загрузок
    с использованием типа данных UploadFile.
        pip install fastapi uvicorn
        from fastapi import FastAPI, File, UploadFile
        from fastapi.responses import HTMLResponse
        
        app = FastAPI()
        
        @app.post("/uploadfile/")
        async def create_upload_file(file: UploadFile = File(...)):
            return {"filename": file.filename}
        
        @app.post("/createfile/")
        async def create_file(file: bytes = File(...)):
            return {"file_size": len(file)}
        
        @app.post("/files/")
        async def create_file_and_description(file: UploadFile = File(...), description: str = Form(...)):
            return {"filename": file.filename, "description": description}

--> Как настроить дополнительные параметры запроса (request validation) в FastAPI?
    - FastAPI обеспечивает простой и интуитивно понятный способ настройки 
    валидации запросов через модель данных.
        pip install fastapi uvicorn pydantic
        from fastapi import FastAPI, Query
        from pydantic import BaseModel
        
        app = FastAPI()
        
        class Item(BaseModel):
            name: str
            description: str = None
            price: float
            tax: float = None
        
        @app.post("/items/")
        async def create_item(item: Item, importance: int = Query(..., alias="imp")):
            return {"item_name": item.name, "item_price": item.price, "importance": importance}

--> Как реализовать асинхронные задачи в фоне (background tasks) в FastAPI?
    - FastAPI предоставляет возможность выполнения асинхронных задач в фоновом режиме с 
    использованием "background tasks". Это может быть полезно, например, для выполнения
    долгих операций без блокировки основного потока запроса.
        pip install fastapi uvicorn
        from fastapi import FastAPI, BackgroundTasks
        app = FastAPI()
        def write_log(message: str):
            with open("log.txt", mode="a") as log:
                log.write(message)
        @app.post("/send-notification/{email}")
        async def send_notification(
            email: str, background_tasks: BackgroundTasks
        ):
            message = f"message to {email}\n"
            background_tasks.add_task(write_log, message)
            return {"message": "Message sent in the background"}

--> Как создать пользовательские зависимости (user-defined dependencies) в FastAPI?
    - В FastAPI пользовательские зависимости (user-defined dependencies) могут быть
    созданы с использованием функций, классов или асинхронных функций. Эти зависимости
    могут быть использованы для выполнения дополнительных действий перед
    выполнением маршрута. 
        from fastapi import Depends, FastAPI, HTTPException
        # Пользовательская зависимость в виде функции
        def get_query_token(token: str = Depends(lambda t: t)):
            if token != "fake-token":
                raise HTTPException(status_code=400, detail="Invalid token")
            return token
        app = FastAPI()
        # Использование пользовательской зависимости в маршруте
        @app.get("/items/")
        async def read_items(token: str = Depends(get_query_token)):
            return {"token": token}
    - В этом примере get_query_token представляет собой пользовательскую зависимость,
    которая проверяет токен запроса. Если токен не равен "fake-token",
    то будет вызвано исключение HTTPException.

--> Как обеспечить безопасность API в FastAPI?
    1) OAuth2 и JWT (JSON Web Tokens): FastAPI поддерживает OAuth2 для аутентификации
    и авторизации. Вы можете использовать стандартные библиотеки Python для работы
    с токенами JWT. Пример использования OAuth2 можно найти в документации FastAPI.
    2) Пароли и хеширование: FastAPI предоставляет инструменты для безопасного
    хранения паролей с использованием хеширования. Вы можете использовать библиотеку
    Passlib для обеспечения безопасного хеширования паролей.
    3) Ограничения CORS: FastAPI позволяет настраивать Cross-Origin Resource Sharing
    (CORS), чтобы ограничить запросы только с определенных источников. Это важно для
    предотвращения атак межсайтовой подделки запроса (CSRF).
    4) Rate Limiting: FastAPI предоставляет возможность устанавливать ограничения на
    количество запросов для предотвращения атак перебора и других видов злоупотребления.

--> Как тестировать приложение FastAPI?
    1) Установка зависимостей:
    - Установите зависимости, включая fastapi, uvicorn (для запуска сервера) и 
    pytest (для написания тестов):
        pip install fastapi uvicorn pytest
    2) Написание тестов:
    - Напишите тесты с использованием pytest. Создайте файл с тестами, например,
    test_main.py, и определите ваши тесты. Вам нужно будет импортировать объект
    FastAPI и функции, которые вы хотите протестировать.
        from fastapi.testclient import TestClient
        from main import app
        client = TestClient(app)
        def test_read_main():
            response = client.get("/")
            assert response.status_code == 200
            assert response.json() == {"msg": "Hello, World!"}
    3) Запустите тесты с помощью pytest в командной строке: pytest
    4) Тестирование асинхронных эндпоинтов:
    Если ваши эндпоинты используют асинхронные функции, убедитесь, что ваши
    тесты тоже асинхронные. Вы можете использовать asyncio в pytest для этого:
    import asyncio
    @pytest.mark.asyncio
    async def test_async_endpoint():
        response = await client.get("/async_endpoint")
        assert response.status_code == 200
    5) Параметризированные тесты:
    Вы можете использовать параметризированные тесты, чтобы проверить
    различные входные данные:
        @pytest.mark.parametrize("input, expected", [("data1", 200), ("data2", 404)])
        def test_example(input, expected):
            response = client.get(f"/endpoint/{input}")
            assert response.status_code == expected

--> Какие аспекты производительности следует учитывать при разработке FastAPI-приложений?
    1) Использование асинхронности:
    - FastAPI основан на асинхронном программировании с использованием Python 3.7+
    и корутин из стандартной библиотеки. Использование асинхронных запросов и
    асинхронных функций может улучшить производительность при обработке большого количества запросов.
    2) Оптимизация запросов к базе данных:
    - Если ваше приложение взаимодействует с базой данных, убедитесь, что SQL-запросы
    эффективны. Используйте индексы, пакетные операции и другие оптимизации для
    снижения нагрузки на базу данных.
    3) Использование кэширования:
    - Рассмотрите возможность использования кэширования, чтобы снизить нагрузку на
    базу данных или уменьшить вычислительную сложность определенных операций.
    FastAPI поддерживает различные библиотеки кэширования.
    4) Оптимизация статических файлов:
    - Если ваше приложение обслуживает статические файлы (CSS, JS, изображения),
    рассмотрите возможность использования Content Delivery Network (CDN) и
    установки кэширования для улучшения производительности загрузки страниц.
    5) Масштабируемость:
    - Рассмотрите возможность развертывания вашего приложения в многопроцессорной
    среде (например, с помощью uvicorn с параметром --workers). Это позволяет
    обрабатывать несколько запросов параллельно, улучшая производительность.
    6) Профилирование и мониторинг:
    - Используйте инструменты профилирования и мониторинга, чтобы выявить узкие места
    в вашем коде и понять, какие части приложения занимают больше всего ресурсов.
    7) Оптимизация зависимостей:
    - Если вы используете сторонние библиотеки, убедитесь, что они оптимизированы
    и актуальны. Некоторые библиотеки могут быть причиной узких мест.
    8) Ограничение сложности запросов:
    - Попытайтесь минимизировать сложность запросов и ответов. Верните только те
    данные, которые действительно нужны клиенту.
    9) Применение HTTP-кэширования:
    - Используйте HTTP-заголовки кэширования, чтобы уменьшить количество повторных
    запросов, особенно для статических ресурсов.
    10) Использование асинхронных баз данных:
    - Если возможно, используйте асинхронные адаптеры для работы с базой данных,
    чтобы эффективно управлять множеством асинхронных запросов.

-------------------------------------- Swagger UI --------------------------------------
--> Что такое Swagger UI?
    - Swagger UI - это инструмент для визуализации и тестирования RESTful веб-сервисов, 
    описанных с использованием спецификации OpenAPI (ранее была известна как Swagger).
    OpenAPI описывает структуру API, включая доступные эндпоинты, параметры запросов,
    форматы данных и другую информацию, необходимую для взаимодействия с веб-сервисом.
    - Swagger UI предоставляет дружественный веб-интерфейс, который позволяет
    разработчикам легко изучать и тестировать API, предоставляя визуальное представление
    документации. С помощью Swagger UI вы можете выполнять запросы к эндпоинтам, проверять 
    ответы и осуществлять отладку вашего API.
    - Основные возможности Swagger UI:
    1) Дружественный интерфейс: Swagger UI предоставляет удобный и понятный интерфейс для
    взаимодействия с вашим API. Разработчики могут легко просматривать доступные эндпоинты
    и понимать, как использовать каждый из них.
    2) Тестирование запросов: Вы можете выполнять запросы к эндпоинтам API, проверяя, 
    как они реагируют на различные параметры и данные.
    3) Генерация кода: Swagger UI позволяет автоматически генерировать примеры кода
    для вызова эндпоинтов API на различных языках программирования.
    4) Визуализация моделей данных: Если ваш API использует структуры данных,
    Swagger UI может визуализировать эти модели и предоставлять документацию по
    полям и их типам.
    5) Форматирование и отладка запросов: Вы можете легко добавлять параметры
    запросов, изменять тело запроса и проверять ответы от API, улучшая процесс
    разработки и отладки.
    - Использование Swagger UI помогает облегчить работу с API и улучшить
    коммуникацию между разработчиками и пользователями вашего веб-сервиса.

-------------------------------------- Pydantic --------------------------------------
--> Что такое Pydantic?
    - Pydantic - это библиотека для проверки данных и создания схем данных в Python.
    Она является декларативной и основана на аннотациях типов переменных Python.
    Pydantic предоставляет способ определения схемы данных (модели) и автоматической 
    валидации данных, что делает процесс обработки и валидации данных в приложении 
    более простым и безопасным.
    - Основные возможности Pydantic включают:
    1) Аннотации типов: Pydantic использует аннотации типов переменных Python для
    определения схемы данных. Это позволяет указывать ожидаемый тип данных для
    каждого поля модели.
    2) Валидация данных: Pydantic автоматически выполняет валидацию входных данных 
    на основе определенной модели. Если данные не соответствуют ожидаемой схеме, 
    будет сгенерировано исключение.
    3) Генерация документации: Pydantic может генерировать автоматическую документацию
    по моделям, что упрощает понимание структуры данных и их типов.
    4) Поддержка JSON Schema: Pydantic генерирует JSON Schema для определенных
    моделей, что полезно при взаимодействии с API.

-------------------------------------- Injector --------------------------------------
--> Что такое Injector?
    - Injector - это библиотека для внедрения зависимостей (dependency injection) в
    приложения Python. Зависимости - это объекты или значения, которые используются
    внутри приложения, и внедрение зависимостей обеспечивает способ предоставления
    этих зависимостей компонентам приложения.
    - В контексте Injector, внедрение зависимостей означает предоставление зависимостей
    в компоненты (классы или функции) вместо того, чтобы позволять компонентам 
    создавать или находить свои зависимости самостоятельно. Это повышает модульность
    и упрощает тестирование, так как зависимости могут быть заменены моками или 
    заглушками для тестирования отдельных компонентов.
