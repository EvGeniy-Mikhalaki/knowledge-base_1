--------------------------------------- RabbitMQ ---------------------------------------

--> Основы RabbitMQ:
    - RabbitMQ — это брокер сообщений, используемый для обеспечения асинхронного
    обмена данными между различными компонентами системы. Он облегчает передачу
    сообщений от отправителя к получателю, а также обеспечивает промежуточное
    хранение и маршрутизацию сообщений.

--> Очереди и обмены:
    - Для создания очереди в RabbitMQ используется операция queue_declare.
    Обмены определяют маршрутизацию сообщений. Direct-обмен используется для
    точной маршрутизации, topic-обмен для гибкой маршрутизации с использованием
    шаблонов, fanout-обмен для маршрутизации сообщений всем связанным очередям,
    headers-обмен для маршрутизации по заголовкам сообщений.

--> Свойства сообщений:
    - Свойства сообщений в RabbitMQ включают заголовки, приоритет, идентификатор
    сообщения, TTL и другие. Свойства могут быть установлены при отправке
    сообщения и использованы для дополнительной маршрутизации или 
    обработки на стороне получателя.

--> Подтверждение получения сообщений:
    - Подтверждение получения (acknowledgment) в RabbitMQ используется для
    гарантии, что сообщение было успешно обработано. Получатель отправляет
    подтверждение брокеру после успешной обработки сообщения.

--> Обработка ошибок и ретраи:
    - Обработка ошибок может включать в себя механизмы повторной обработки
    (ретраи) или перенаправление в специальные очереди обработки ошибок.
    Ретраи могут быть реализованы с использованием TTL или дополнительной
    логики приложения.

--> Обработка параллельности и конкурентности:
    - Параллельная обработка сообщений может быть достигнута с использованием 
    нескольких потребителей для одной очереди. Для конкурентной обработки 
    можно использовать несколько очередей с разными потребителями.

--> Кластеризация и отказоустойчивость:
    - Кластер RabbitMQ может быть настроен для повышения отказоустойчивости.
    Кластер может включать в себя несколько узлов, и сообщения будут 
    реплицироваться для обеспечения доступности в случае отказа одного из узлов.

--> Сценарии использования:
    - RabbitMQ может использоваться для асинхронной обработки задач, 
    микросервисной архитектуры, обработки событий, отправки уведомлений 
    и других сценариев.

--> Инструменты мониторинга и управления:
    - RabbitMQ предоставляет веб-интерфейс для мониторинга и управления, 
    а также API для автоматизации. Можно использовать инструменты, такие 
    как RabbitMQ Management Plugin, для визуализации статистики и 
    настройки параметров.

--> Интеграция с другими технологиями:
    - RabbitMQ поддерживает различные протоколы, такие как AMQP, MQTT и 
    другие. Для интеграции с разными технологиями, используйте
    соответствующие библиотеки и стандарты связи.

--> Как работает подтверждение транзакции в RabbitMQ?
    - В RabbitMQ транзакции включают три основные команды: tx.select, tx.commit
    и tx.rollback. tx.select начинает транзакцию, все последующие опубликованные
    сообщения или операции над очередями входят в эту транзакцию. tx.commit
    подтверждает транзакцию, отправляя все накопленные сообщения в очереди. 
    tx.rollback отменяет транзакцию, откатывая все накопленные изменения.

--> Какие существуют типы обменов в RabbitMQ, и когда их лучше использовать?
    - Direct Exchange: Используется для точной маршрутизации. Сообщение 
    отправляется в очередь с определенным ключом маршрута.
    - Topic Exchange: Позволяет гибкую маршрутизацию на основе шаблонов ключей маршрута.
    - Fanout Exchange: Рассылает сообщения всем связанным очередям, игнорируя
    ключи маршрута.
    - Headers Exchange: Маршрутизация основывается на заголовках сообщения. 
    Позволяет использовать сложные правила маршрутизации.

-->Как настроить маршрутизацию сообщений на основе заголовков?
    - В RabbitMQ для этого используется Headers Exchange. При объявлении обмена
    задается тип "headers", и при публикации сообщения указываются заголовки,
    которые будут использоваться для маршрутизации.

--> Как обеспечить гарантированную доставку сообщений в RabbitMQ?
    - Гарантированная доставка может быть обеспечена с использованием 
    подтверждений (ack). Подтверждение получения позволяет отправителю узнать,
    что сообщение успешно было доставлено и обработано.

--> Что такое атрибут TTL (Time-to-Live) для сообщений, и как он работает в RabbitMQ?
    - Атрибут expiration в RabbitMQ определяет время жизни сообщения (TTL).
    Если сообщение не было обработано за указанный период, оно будет удалено из очереди.

--> Как обеспечить безопасность RabbitMQ?
    - Безопасность RabbitMQ включает в себя аутентификацию, авторизацию 
    и шифрование. Можно настроить SSL для шифрования соединения, управлять
    пользователями и правами доступа через механизмы аутентификации.

--> Какие инструменты для отладки и мониторинга RabbitMQ вы использовали?
    - RabbitMQ предоставляет веб-интерфейс для мониторинга. Инструменты
    могут включать RabbitMQ Management Plugin, Prometheus, Grafana и другие.

--> Какие существуют стратегии для масштабирования RabbitMQ?
    - RabbitMQ может быть масштабирован с использованием кластеров. Кластер 
    позволяет распределить нагрузку между узлами, обеспечивает отказоустойчивость
    и повышает производительность.

--> Что такое шаблоны обменов (Exchange-to-Exchange bindings) в RabbitMQ?
    - Это механизм, который позволяет связать один обмен с другим.
    Когда сообщение публикуется в одном обмене, оно может быть автоматически
    направлено в другой обмен согласно определенным правилам.

--> Как настроить Dead Letter Exchanges в RabbitMQ?
    - Dead Letter Exchanges используются для обработки сообщений, которые 
    не удалось доставить. Можно настроить обмен, куда будут направляться
    такие сообщения для дополнительной обработки.
