------------------- PostgreSQL ------------------------------------------
--> Что такое PostgreSQL?

--> Какие основные характеристики PostgreSQL?

--> Как установить PostgreSQL и какие основные настройки требуют внимания при установке?

--> Что такое схема в PostgreSQL?

--> Как создать индекс в PostgreSQL и какие виды индексов поддерживаются?

--> Как выполнить базовые операции CRUD (Create, Read, Update, Delete) в PostgreSQL?

--> Что такое транзакция в PostgreSQL и как ее использовать?

--> Что такое представление в PostgreSQL?

--> Как выполнить резервное копирование и восстановление базы данных PostgreSQL?

--> Как оптимизировать запросы в PostgreSQL?

--> Что такое функция в PostgreSQL и как ее создать?

--> Как работать с триггерами в PostgreSQL?

--> Что такое расширения (extensions) в PostgreSQL?

--> Как использовать инструменты мониторинга и управления PostgreSQL (например, pgAdmin)?

------------------- sqlalchemy ------------------------------------------

--> Что такое sqlalchemy?
    - SQLAlchemy - это популярная библиотека для работы с базами данных в Python. 
    Она предоставляет ORM (Object-Relational Mapping) для удобной работы с данными 
    в базах данных с использованием объектно-ориентированного подхода. 
    1) ORM (Object-Relational Mapping):
    - SQLAlchemy позволяет вам взаимодействовать с базой данных, используя 
    объекты Python, которые отображаются на записи в базе данных. Это облегчает 
    работу с базой данных, скрывая сложности SQL-запросов.
    2) Core и ORM:
    - SQLAlchemy разделяется на две основные части: SQLAlchemy Core для 
    низкоуровневых операций с базой данных и SQLAlchemy ORM для работы с
    объектами. Вы можете использовать их по отдельности или вместе.
    3) Сессии:
    - Сессии SQLAlchemy предоставляют механизм отслеживания изменений
    в объектах и синхронизации этих изменений с базой данных. Сессии
    управляют жизненным циклом объектов и обеспечивают транзакционность.
    4) Модели данных:
    - Модели данных SQLAlchemy представляют собой классы Python, которые
    отображаются на таблицы базы данных. Они определяются с использованием
    декларативного (declarative) или классического (classical) стиля.
    5) Выражения SQL:
    - SQLAlchemy предоставляет SQL-выражения, которые можно использовать
    для построения SQL-запросов с использованием высокоуровневого API,
    что делает их более читаемыми и легкими в поддержке.
    6) Миграции:
    - SQLAlchemy поддерживает механизм миграции данных, который облегчает
    обновление схемы базы данных при изменении моделей данных.

--> Как устанавливается sqlalchemy?
        pip install SQLAlchemy

--> Что такое Alembic?
    - Alembic - это инструмент для управления миграциями баз данных в Python. 
    Он интегрируется с SQLAlchemy и предоставляет механизм для изменения структуры
    базы данных с течением времени, что особенно полезно в контексте развивающихся проектов.
    1) Миграции:
    Alembic позволяет определить изменения в базе данных в виде миграций. Миграции
    представляют собой последовательные шаги, которые могут добавлять, изменять
    или удалять таблицы, столбцы и другие элементы базы данных.
    2) Версионирование:
    Каждая миграция имеет свой уникальный идентификатор версии, который
    обеспечивает порядок применения миграций. Alembic автоматически отслеживает
    текущую версию базы данных.
    3) Скрипты миграций:
    Миграции создаются в виде Python-скриптов, описывающих изменения базы данных.
    Эти скрипты могут быть созданы автоматически с использованием Alembic CLI.
    4) Интеграция с SQLAlchemy:
    Alembic интегрируется с SQLAlchemy, что обеспечивает единый опыт
    работы с базой данных и моделями данных в проекте.
    5) Контроль версий:
    Alembic легко интегрируется с системами контроля версий (например,
    Git) для управления историей миграций.

--> Как устанавливается Alembic?
    1) Установка Alembic: pip install alembic
    2) Инициализация проекта Alembic: alembic init my_migration_project
    3) Определение модели данных SQLAlchemy:
        # В файле models.py
        from sqlalchemy import Column, Integer, String
        from sqlalchemy.ext.declarative import declarative_base
        Base = declarative_base()
        class User(Base):
            __tablename__ = 'users'
            id = Column(Integer, primary_key=True)
            name = Column(String)
    4) Генерация миграции: alembic revision --autogenerate -m "create user table"
    5) Применение миграции: alembic upgrade head

--> Чем отличается Core от ORM в SQLAlchemy?
    - SQL-выражения и запросы: Core предоставляет выражения и объекты для построения
    SQL-запросов и операций без использования объектов Python. Это более
    низкоуровневый подход, который предоставляет полный контроль над генерацией SQL.
    - Отображение объектов: ORM предоставляет средства для отображения объектов
    Python на записи базы данных, обеспечивая более высокоуровневый и удобный
    интерфейс. Классы Python представляют таблицы базы данных, а экземпляры
    этих классов соответствуют отдельным записям.

--> Как создать соединение с базой данных с использованием SQLAlchemy?
    1) Импортируйте необходимые модули:
        - Core API: from sqlalchemy import create_engine
        - ORM API:  from sqlalchemy import create_engine
                    from sqlalchemy.orm import sessionmaker
    2) Создайте объект соединения (Core API):
    - Для Core API создайте объект Engine, представляющий соединение с базой
    данных. Вам нужно предоставить строку подключения к вашей базе данных:
        # Пример строки подключения SQLite (замените на свою базу данных)
        db_url = "sqlite:///example.db"        
        # Создайте объект Engine
        engine = create_engine(db_url)
    3) Создайте объект соединения и выполните запрос (Core API):
    - Если нужно, создайте объект Connection и выполните запрос к базе данных:
        with engine.connect() as connection:
        result = connection.execute("SELECT * FROM your_table")
        for row in result:
            print(row)
    4) Создайте сессию (ORM API):
    Для ORM API создайте объект Engine и объект Session, который будет
    использоваться для взаимодействия с базой данных:
        # Пример строки подключения SQLite (замените на свою базу данных)
        db_url = "sqlite:///example.db"
        # Создайте объект Engine
        engine = create_engine(db_url)
        # Создайте объект Session
        Session = sessionmaker(bind=engine)
    5) Создайте объект сессии и выполните запрос (ORM API):
    - Создайте объект Session, который будет использоваться для выполнения операций
    с базой данных, таких как добавление, обновление и удаление объектов:
        # Создайте объект сессии
        session = Session()
        # Пример выполнения запроса с использованием ORM
        results = session.query(YourModel).all()
        for result in results:
            print(result)

--> Как создать таблицу в SQLAlchemy?
    - В SQLAlchemy создание таблицы можно выполнить с использованием объектов модели
    в случае использования ORM API (Object Relational Mapper) или с использованием
    объекта Table в случае использования Core API (SQL Expression Language).
    - Использование ORM API:
        from sqlalchemy import create_engine, Column, Integer, String, Sequence
        from sqlalchemy.ext.declarative import declarative_base
        from sqlalchemy.orm import sessionmaker
        # Определение базового класса модели
        Base = declarative_base()
        # Определение модели (класса) для таблицы
        class YourModel(Base):
            __tablename__ = 'your_table'
            id = Column(Integer, Sequence('user_id_seq'), primary_key=True)
            name = Column(String(50))
            description = Column(String(100))
        # Пример строки подключения SQLite (замените на свою базу данных)
        db_url = "sqlite:///example.db"
        # Создание объекта Engine
        engine = create_engine(db_url)
        # Создание таблицы
        Base.metadata.create_all(engine)
    - Использование Core API:
        from sqlalchemy import create_engine, MetaData, Table, Column, Integer, String
        # Пример строки подключения SQLite (замените на свою базу данных)
        db_url = "sqlite:///example.db"
        # Создание объекта Engine
        engine = create_engine(db_url)
        # Создание объекта MetaData
        metadata = MetaData()
        # Определение таблицы
        your_table = Table('your_table', metadata,
                           Column('id', Integer, primary_key=True),
                           Column('name', String(50)),
                           Column('description', String(100))
                           )
        # Создание таблицы
        metadata.create_all(engine)

--> Как выполнить запрос к базе данных с использованием SQLAlchemy?
    - Для выполнения запроса к базе данных с использованием SQLAlchemy, 
    вы можете воспользоваться объектами сессии для ORM-запросов или 
    объектом engine для SQL-выражений.
    ORM API:
        from sqlalchemy import create_engine, Column, Integer, String, Sequence
        from sqlalchemy.ext.declarative import declarative_base
        from sqlalchemy.orm import sessionmaker
        # Определение базового класса модели
        Base = declarative_base()
        # Определение модели (класса) для таблицы
        class YourModel(Base):
            __tablename__ = 'your_table'
            id = Column(Integer, Sequence('user_id_seq'), primary_key=True)
            name = Column(String(50))
            description = Column(String(100))
        # Пример строки подключения SQLite (замените на свою базу данных)
        db_url = "sqlite:///example.db"
        # Создание объекта Engine
        engine = create_engine(db_url)
        # Создание объекта сессии
        Session = sessionmaker(bind=engine)
        session = Session()
        # Выполнение запроса
        result = session.query(YourModel).filter_by(name='example').first()
        # Вывод результата запроса
        print(result)
    Core API:
        from sqlalchemy import create_engine, MetaData, Table, Column, Integer, String, select
        # Пример строки подключения SQLite (замените на свою базу данных)
        db_url = "sqlite:///example.db"
        # Создание объекта Engine
        engine = create_engine(db_url)
        # Создание объекта MetaData
        metadata = MetaData()
        # Определение таблицы
        your_table = Table('your_table', metadata,
                           Column('id', Integer, primary_key=True),
                           Column('name', String(50)),
                           Column('description', String(100))
                           )
        # Создание объекта соединения
        connection = engine.connect()
        # Выполнение запроса
        stmt = select([your_table]).where(your_table.c.name == 'example')
        result = connection.execute(stmt).fetchall()
        # Вывод результата запроса
        print(result)

--> Как работает автоматическая транзакция в sqlalchemy?
    - В SQLAlchemy автоматическое управление транзакциями обычно
    происходит с использованием контекстных менеджеров, таких как
    Session. SQLAlchemy предоставляет объект Session для работы с
    базой данных и управления транзакциями.

--> Что такое сессия SQLAlchemy и как ее использовать?
    - В SQLAlchemy, сессия (Session) представляет собой основной механизм
    для работы с базой данных и управления транзакциями. Сессия 
    обеспечивает контекст для взаимодействия с базой данных,
    позволяя выполнять операции чтения, записи и изменения в
    контролируемой транзакции.
    1) Создание объекта Session:
        from sqlalchemy import create_engine
        from sqlalchemy.orm import sessionmaker
        # Создание объекта Engine для подключения к базе данных
        engine = create_engine('sqlite:///:memory:')
        # Создание объекта Session с привязкой к Engine
        Session = sessionmaker(bind=engine)
        # Создание экземпляра Session
        session = Session()
    2) Открытие и закрытие сессии:
        # Открытие сессии
        session = Session()
        # ...выполнение операций с базой данных...
        # Закрытие сессии
        session.close()
    3) Контекстный менеджер with для автоматического управления транзакциями:
        from sqlalchemy import create_engine
        from sqlalchemy.orm import sessionmaker
        engine = create_engine('sqlite:///:memory:')
        Session = sessionmaker(bind=engine)
        # Использование сессии в контекстном менеджере
        with Session() as session:
            # Весь код внутри этого блока будет выполняться в рамках одной транзакции
            # ...выполнение операций с базой данных...
            # Транзакция будет автоматически зафиксирована или откатана при выходе из блока

--> Какие типы отношений поддерживаются в SQLAlchemy?
    1) Один ко многим (One-to-Many):
        from sqlalchemy import ForeignKey
        from sqlalchemy.orm import relationship
        class Author(Base):
            __tablename__ = 'authors'
            id = Column(Integer, primary_key=True)
            name = Column(String)
            books = relationship('Book', back_populates='author')
        class Book(Base):
            __tablename__ = 'books'
            id = Column(Integer, primary_key=True)
            title = Column(String)
            author_id = Column(Integer, ForeignKey('authors.id'))
            author = relationship('Author', back_populates='books')
    2) Многие ко многим (Many-to-Many):
        from sqlalchemy import Table, Column, Integer, ForeignKey
        from sqlalchemy.orm import relationship
        association_table = Table('association', Base.metadata,
            Column('student_id', Integer, ForeignKey('students.id')),
            Column('course_id', Integer, ForeignKey('courses.id'))
        )
        class Student(Base):
            __tablename__ = 'students'
            id = Column(Integer, primary_key=True)
            name = Column(String)
            courses = relationship('Course', secondary=association_table, back_populates='students')
        class Course(Base):
            __tablename__ = 'courses'
            id = Column(Integer, primary_key=True)
            title = Column(String)
            students = relationship('Student', secondary=association_table, back_populates='courses')
    
    3) Один к одному (One-to-One):
        class User(Base):
            __tablename__ = 'users'
            id = Column(Integer, primary_key=True)
            username = Column(String, unique=True)
            account = relationship('Account', uselist=False, back_populates='user')
        
        class Account(Base):
            __tablename__ = 'accounts'
            id = Column(Integer, primary_key=True)
            user_id = Column(Integer, ForeignKey('users.id'), unique=True)
            user = relationship('User', back_populates='account')
       4) Самосвязь (Self-Referential):
            class Category(Base):
                __tablename__ = 'categories'
                id = Column(Integer, primary_key=True)
                name = Column(String)
                parent_id = Column(Integer, ForeignKey('categories.id'))
                children = relationship('Category', backref=backref('parent', remote_side=[id]))

--> Как в SQLAlchemy обеспечивается безопасность от инъекций SQL?
    - SQLAlchemy предоставляет множество механизмов для предотвращения 
    инъекций SQL и обеспечения безопасности при выполнении запросов.
    Основные методы включают использование параметризованных запросов
    и методов, предоставляемых самим SQLAlchemy.
    1) Параметризованные запросы (Parameterized Queries):
    - Вместо вставки значений напрямую в SQL-запрос, используйте параметры,
    которые автоматически обрабатываются SQLAlchemy. Это предотвращает
    возможность внедрения зловредного SQL-кода.
        # Плохой способ (подвержен инъекциям SQL)
        username = "admin'; DROP TABLE users; --"
        result = session.execute(f"SELECT * FROM users WHERE username = '{username}'")
        # Хороший способ (параметризованный запрос)
        result = session.execute("SELECT * FROM users WHERE username = :username", {'username': 'admin'})
    2) ORM и методы фильтрации:
    - При использовании ORM SQLAlchemy, используйте методы фильтрации, 
    предоставляемые SQLAlchemy, которые автоматически обрабатывают 
    параметры запроса.
        # Плохой способ
        username = "admin'; DROP TABLE users; --"
        user = session.query(User).filter(f"username = '{username}'").first()
        # Хороший способ
        user = session.query(User).filter_by(username='admin').first()
    3) Использование ORM и связей:
    - При работе с связями в ORM, используйте методы, предоставляемые 
    SQLAlchemy, чтобы автоматически обрабатывать связи и параметры.
        # Плохой способ
        user_id = "1 OR 1=1"
        books = session.query(Book).filter(f"author_id = {user_id}")
        # Хороший способ
        books = session.query(Book).filter_by(author_id=1)
    4) Использование выражений SQLAlchemy:
    - Используйте выражения SQLAlchemy для построения запросов,
    обеспечивая безопасность от инъекций SQL.
        from sqlalchemy import text
        # Плохой способ
        username = "admin'; DROP TABLE users; --"
        result = session.execute(text(f"SELECT * FROM users WHERE username = '{username}'"))
        # Хороший способ (используя выражение SQLAlchemy)
        result = session.execute(text("SELECT * FROM users WHERE username = :username"), {'username': 'admin'})
    5) Использование ORM и NamedTuple:
    - Используйте NamedTuple вместо строк в запросах, чтобы обеспечить 
    типизированные параметры и предотвратить инъекции.
        from sqlalchemy.orm import load_only
        # Плохой способ
        columns = "username, password"
        user = session.query(User).options(load_only(*columns.split(', '))).filter_by(username='admin').first()
        # Хороший способ (используя NamedTuple)
        columns = ['username', 'password']
        user = session.query(User).options(load_only(*columns)).filter_by(username='admin').first()

--> Как использовать индексы в SQLAlchemy?
    - SQLAlchemy предоставляет возможности для создания индексов в таблицах
    базы данных. Индексы в SQLAlchemy могут быть определены на уровне
    модели с использованием различных классов и параметров.
    1) Определение индекса на уровне модели:
        from sqlalchemy import create_engine, Column, Integer, String, Index
        from sqlalchemy.ext.declarative import declarative_base
        Base = declarative_base()
        class User(Base):
            __tablename__ = 'users'
            id = Column(Integer, primary_key=True)
            name = Column(String)
            email = Column(String)
            # Пример определения индекса на столбце 'email'
            email_index = Index('idx_email', email)
    2) Определение составного индекса:
        class User(Base):
        __tablename__ = 'users'
        id = Column(Integer, primary_key=True)
        name = Column(String)
        email = Column(String)
        # Пример определения составного индекса на столбцах 'name' и 'email'
        name_email_index = Index('idx_name_email', name, email)
    3) Определение уникального индекса:
        class User(Base):
        __tablename__ = 'users'
        id = Column(Integer, primary_key=True)
        name = Column(String)
        email = Column(String, unique=True)  # Уникальный индекс на столбце 'email'
    4) Использование встроенного параметра index в Column:
        class User(Base):
        __tablename__ = 'users'
        id = Column(Integer, primary_key=True)
        name = Column(String)
        email = Column(String, index=True)  # Индекс на столбце 'email'
    5) Определение индекса с использованием текстового SQL:
        from sqlalchemy import text
        class User(Base):
            __tablename__ = 'users'
            id = Column(Integer, primary_key=True)
            name = Column(String)
            email = Column(String)
            # Определение индекса с использованием текстового SQL
            Index('idx_email_upper', text("UPPER(email)"))
    6) Создание индекса после создания таблицы:
        from sqlalchemy import create_engine, MetaData
        engine = create_engine('sqlite:///:memory:')
        metadata = MetaData()
        users = Table('users', metadata,
            Column('id', Integer, primary_key=True),
            Column('name', String),
            Column('email', String),
        )
        # Создание таблицы без индекса
        metadata.create_all(engine)
        # Создание индекса после создания таблицы
        email_index = Index('idx_email', users.c.email)
        email_index.create(engine)
