# @set_responses(Id)
    # async def delete(self, project_id: Id, user: UserDB = current_user, force: bool = Query(False, description="Флаг подтверждения удаления")):
    #     """
    #     Удаление проекта.\f.

    #     :param project_id: Идентификатор проекта
    #     :param user: Объект пользователя
    #     :return: Идентификатор удаленного объекта
    #     """

    #     data_ws_train = await workspace.Workspace().get(project_id=project_id,
    #                                                     workspace_type='train')

    #     data_ws_predict = await workspace.Workspace().get(project_id=project_id,
    #                                                       workspace_type='predict')

    #     data_ds_model = await ds_model.DSModel().get(project_id=project_id,
    #                                                  user=user)

    #     data_dashboard = await dashboard.Dashboard().get(project_id=project_id,
    #                                                      user=user)

    #     data_report = await report.Report().get(project_id=project_id,
    #                                             user=user)

    #     data_connector = await connection.connector.Connector().get(project_id=project_id,
    #                                                                 user=user)

    #     if not force:

    #         msg = "Вы уверены что хотите удалить проект?\n"
    #         if data_ws_train or data_ws_predict or data_ds_model or data_dashboard or data_report or data_connector:
    #             msg += "И следующие объекты принадлежащие проекту: \n"

    #         if data_ws_train:
    #             msg += "Рабочие области:\n"
    #             for elem_ws_train in data_ws_train:
    #                 msg += str(elem_ws_train.name) + '\n'

    #             for elem_ws_predict in data_ws_predict:
    #                 msg += str(elem_ws_predict.name) + '\n'
            
    #         if data_ds_model:
    #             msg += "Модели:\n"
    #             for elem_ds_model in data_ds_model:
    #                 msg += str(elem_ds_model.name) + '\n'

    #         if data_dashboard:
    #             msg += "Дашборды:\n"
    #             for elem_dashboard in data_dashboard:
    #                 msg += str(elem_dashboard.name) + '\n'

    #         if data_report:
    #             msg += "Отчеты:\n"
    #             for elem_report in data_report:
    #                 msg += str(elem_report.name) + '\n'

    #         if data_connector:
    #             msg += "Коннектор:\n"
    #             for elem_connector in data_connector:
    #                 msg += str(elem_connector.name) + '\n'

    #         raise HTTPException(status_code=400, detail=msg)
        
    #     for elem_ws_train in data_ws_train:
    #         del_elem = await workspace.Workspace().delete(project_id=project_id, workspace_id=elem_ws_train.id, user=user)

    #     for elem_ws_predict in data_ws_predict:
    #         del_elem = await workspace.Workspace().delete(project_id=project_id, workspace_id=elem_ws_predict.id, user=user)

    #     for elem_ds_model in data_ds_model:
    #         file_id = elem_ds_model.directory.id
    #         del_ds_model = await ds_model.DSModel().delete(project_id=project_id, model_id=elem_ds_model.id, user=user)
    #         del_fs = await file.fs.FS().delete(file_id=file_id, user=user)

    #     for elem_dashboard in data_dashboard:
    #         del_dashboard = await dashboard.Dashboard().delete(project_id=project_id, dashboard_id=elem_dashboard.id, user=user)

    #     for elem_report in data_report:
    #         del_report = await report.Report().delete(project_id=project_id, report_id=elem_report.id, user=user)
        
    #     for elem_connector in data_connector:
    #         del_connector = await connection.connector.Connector().delete(id=elem_connector.id, user=user)

    #     return await super().delete(project_id, user)
    # ----------------------------------------------------------------------------------------
# def pars_data_region(data_pars: ParsRegionIn) -> list:
#     ret_data = []
#     region_data = RegionDataOut()
    
#     for row in data_pars.data_for_pars:
#         current_region = row[data_pars.i_region]
        
#         if region_data is None:
#             region_data = {'name': current_region,
#                            'number_le': 0,
#                            'number_company': 0,
#                            'number_bankruptcy': 0,
#                            'amount_debt': 0,
#                            'amount_need_capital': 0,
#                            'amount_repayment': 0}
        
#         region_data['number_le'] += 1
        
#         if float(row[data_pars.i_company]) > 0:
#             region_data['number_company'] += 1
        
#         if float(row[data_pars.i_bankruptcy]) < 0:
#             region_data['number_bankruptcy'] += 1

#         region_data['amount_debt'] += float(row[data_pars.i_tax_arrears])
#         region_data['amount_need_capital'] += float(row[data_pars.i_need_capital])
#         region_data['amount_repayment'] += float(row[data_pars.i_repayment])

#         if current_region != region_data['name']:
#             ret_data.append(region_data)
#             region_data = None

#     if region_data is not None:
#         ret_data.append(region_data)

#     return ret_data


from service_template.src.schemas.user_schema import UserDB
from api_rest.api_manager.handlers.file.datasets import Dataset
from api_rest.api_manager.schemas.dataset_info_schema import DatasetInfoSchema
from api_rest.api_manager.handlers.defaults.default_resources import \
    DefaultPostgresqlResource

from ..defaults.default_router import set_responses
from ..user.apiusers import current_user

class DatasetInfo(DefaultPostgresqlResource):
    URL_PATH = '/dataset-info'
    METHODS = ['GET']
    TAGS = ['Датасеты']
    
    @set_responses(DatasetInfoSchema, methods=['GET'])
    async def get(
        self,
        user: UserDB = current_user,
    ) -> DatasetInfoSchema:
        """
        Получение информации о датасете.

        :param user: Объект пользователя\n
        :return: Информация о датасетах
        """
        current_types = ["таблица", "изображение"]
        return DatasetInfoSchema(types=current_types, 
            single_field=False, 
            number_files=1
            )
